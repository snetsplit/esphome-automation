globals:
   - id: previous_temp
     type: float
     restore_value: false
     initial_value: '3'
   - id: scene_light_host_string_1
     type: const std::vector<std::string>
     initial_value: ${scene_light_host_string_1}


substitutions:
  device_type: "thermometer"
  device_type_nice: "Thermometer"
  dallas_address: "0X0000 whatever"
  dallas_pin: "GPI0 whatever"
  dallas_temp_update_url: "http://whatever"
  dallas_update: 15s
  scene_light_host_string_1: '{"frontyard-switch.lan/number/frontyard_switch_scene","bedroom-switch.lan/number/bedroom_switch_scene"}' 


dallas:
  - pin: ${dallas_pin}
    id: ${device_name}_pin
    update_interval: ${dallas_update}

sensor:
  - platform: dallas
    address: ${dallas_address}
    name: ${friendly_name}
    id: ${device_name}
    icon: mdi:thermometer
    dallas_id: ${device_name}_pin
    on_value:
      then:
      - if:
            condition:
              - lambda: |- 
                  if (x != id(previous_temp)) {
                     id(previous_temp) = x;
                     return true;
                  }
                  return false;
            then:
              - http_request.post: !lambda |- 
                      return "${dallas_temp_update_url}" + std::to_string(x);

number:
  - platform: template
    icon: "mdi:bulb-group-outline"
    name: "${nice_name} Switch Scene"
    id: "${device_name}_scene"
    optimistic: true
    min_value: 0
    max_value: 3
    restore_value: false
    step: 1
    on_value:
      then:
          - lambda: |-
                       HomeassistantServiceResponse resp;
                       resp.service = "scene.turn_on";
                       HomeassistantServiceMap entity_id_kv;
                       entity_id_kv.key = "entity_id";
                       entity_id_kv.value ="scene.hallway" + std::to_string(int(x));
                       id(api_id).send_homeassistant_service_call(resp);
                        esphome::http_request::HttpRequestComponent httpRequestComponent = esphome::http_request::HttpRequestComponent();
                        httpRequestComponent.set_method("POST");
                        for(std::string host_path : id(scene_light_host_string_1)) {
                            httpRequestComponent.set_url("http://" +host_path + "/set?value=" + std::to_string(int(x)));
                            httpRequestComponent.send({});
                        }
                        httpRequestComponent.close();

packages:
  device-base: 
    url: https://github.com/snetsplit/esphome-automation
    file: yaml/base/esp8266.yaml
    refresh: 1d
