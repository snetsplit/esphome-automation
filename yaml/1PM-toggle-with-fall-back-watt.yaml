    
globals:
   - id: input_number_min
     type: int
     restore_value: no
     initial_value: ${light_automation_input_number_min}
   - id: input_number_max
     type: int
     restore_value: no
     initial_value: ${light_automation_input_number_min}
   - id: input_number
     type: int
     restore_value: yes
     initial_value: ${light_automation_input_number_max}

substitutions:
  light_automation_input_number: "input_number.foo"
  light_automation_input_number_min: '1'
  light_automation_input_number_max: '4'
  
packages:
  device-base: 
    url: https://github.com/snetsplit/shelly-esphome
    file: yaml/1PM-base-with-HA-ping-sensor.yaml
    refresh: 0s

     
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO4
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: "${friendly_name} External Switch"
    on_state:
      then:
      - lambda: |-
          id(input_number) += 1;
          if (id(input_number) > id(input_number_max) ) {
             id(input_number) = id(input_number_min);
          }
      - if:
          condition:
            and:
              - wifi.connected:
              - api.connected:
              - lambda: return id(packet_loss).state < 100;
          then:
            - homeassistant.service:
                service: input_number.set_value    
                data_template:  
                   value: |-
                      id(input_number)                
                   entity_id: ${light_automation_input_number}
          else:
            - switch.toggle: shelly_relay
    internal: false
    id: switchid

number:
  - platform: template
    name: "${friendly_name} Toggle"
    id: "${device_name}_toggle"
    optimistic: true
    min_value: 1
    max_value: 3
    restore_value: true
    step: 1
    on_value:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template: 
              entity_id: !lambda  |- 
                int sceneNameLength = 64;
                char sceneNameCharBuffer[sceneNameLength]; 
                std::snprintf(sceneNameCharBuffer, sceneNameLength, "scene.${device_name}%.0f", x); 
                std::string sceneName = sceneNameCharBuffer;
                ESP_LOGI("scene", "Setting scene: %s", sceneName.c_str()); 
                return sceneName.c_str();
