#source for orginal: https://www.esphome-devices.com/devices/Shelly-1PM
globals:
   - id: input_number_min
     type: int
     restore_value: no
     initial_value: ${light_automation_input_number_min}
   - id: input_number_max
     type: int
     restore_value: no
     initial_value: ${light_automation_input_number_min}
   - id: input_number
     type: int
     restore_value: yes
     initial_value: ${light_automation_input_number_max}
   - id: basic_edge_switch_toggle_boolean
     type: bool
     restore_value: true
     initial_value: 'false'
    
substitutions:
  nice_name: "1PM Shelly"
  device_name: "shelly1pm"
  max_temp: "80.0"
  max_power: "2000.0"
  friendly_name: "${nice_name} Shelly"
  restore_mode: RESTORE_DEFAULT_ON
  light_automation_input_number_min: '1'
  light_automation_input_number_max: '4'
  home_assistant_IP: "192.168.1.1"
  ping_rate: 16sec
  address: "${device_name}-switch.lan"
  web_server_port: "80"
  ssid: "IP freely"
  password: "ewwwwwwwww"
    
logger:

api:

ota:

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  comment: ${friendly_name}
  libraries:
    - ESP8266WiFi
    - https://github.com/akaJes/AsyncPing#95ac7e4


time:
  - platform: homeassistant
    id: homeassistant_time

wifi:
  ssid: ${ssid}
  password: ${password}
  use_address: ${address}
  ap:
    ssid: "${nice_name} Fallback"
    password: ${password}


web_server:
  port: ${web_server_port}

captive_portal:



switch:
  - platform: gpio
    name: "${nice_name} Switch Relay"
    pin: GPIO15
    id: shelly_relay
    icon: "mdi:electric-switch"
    restore_mode: ${restore_mode}
    
  - platform: template
    name: "${nice_name} Switch Edge Mode"
    id: "basic_edge_switch_toggle_switch"
    optimistic: false
    restore_state: false
    turn_on_action:
      - globals.set:
          id: basic_edge_switch_toggle_boolean
          value: 'true'
    turn_off_action:
      - globals.set:
          id: basic_edge_switch_toggle_boolean
          value: 'false'
    lambda: |-
      return id(basic_edge_switch_toggle_boolean);

sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    device_class: signal_strength
    update_interval: 60s
  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "${nice_name} Watts"
      unit_of_measurement: W
      id: "shelly1pm_power"
      device_class: power
      state_class: measurement
      accuracy_decimals: 0
      filters:
      # Map from sensor -> measured value
      - calibrate_linear:
          - 0.0 -> 1.0
          - 110.33186 -> 20.62
          - 131.01909 -> 24.32
          - 341.33920 -> 62.08
          - 5561.41553 -> 1000.0
          - 2975.51221 -> 535.7
          - 9612.66309 -> 1720.0
          - 14891.35352 -> 2679.0
      # Make everything below 2W appear as just 0W.
      - lambda: if (x < 2) return 0; else return x;
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: shelly_relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${friendly_name}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W      
    update_interval: 10s

  - platform: total_daily_energy
    name: "${nice_name} Watts Last 24 hours"
    power_id: "shelly1pm_power"
    device_class: energy
    state_class: measurement
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: ntc
    sensor: temp_resistance_reading
    name: "${nice_name} Temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - switch.turn_off: shelly_relay
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${friendly_name}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}Â°C
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "${friendly_name} has overheated."
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0
    
  - platform: ping
    ip_address: ${home_assistant_IP}
    num_attempts: 1
    timeout: 1sec

    loss:
      id: packet_loss
      name: "Home Assistant Packet Loss"

    latency:
      id: latency
      name: "Home Assistant Latency"
      accuracy_decimals: 3

    update_interval: ${ping_rate}


output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true


external_components:
  - source: github://trombik/esphome-component-ping
    components: [ ping ]
    
     
binary_sensor:
  - platform: gpio
    pin: GPIO16
    name: "ade7953 IRQ pin"
    internal: true
  - platform: gpio
    pin:
      number: GPIO4
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: "${friendly_name} External Switch"
    on_state:
      then:
      - lambda: |-
          id(input_number) += 1;
          if (id(input_number) > id(input_number_max) ) {
             id(input_number) = id(input_number_min);
          }
      - if:
          condition:
            and:
              - wifi.connected:
              - api.connected:
              - lambda: return ((id(packet_loss).state < 100) && !id(basic_edge_switch_toggle_boolean));
          then:
            - number.increment:
                id: "${device_name}_scene"
                cycle: true
                
          else:
            - switch.toggle: shelly_relay
    internal: false
    id: switchid

number:
  - platform: template
    name: "${nice_name} Switch Scene"
    id: "${device_name}_scene"
    optimistic: true
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    step: 1
    on_value:
      then:
        - homeassistant.service:
            service: scene.turn_on
            data_template: 
              entity_id: !lambda  |- 
                int sceneNameLength = 64;
                char sceneNameCharBuffer[sceneNameLength]; 
                std::snprintf(sceneNameCharBuffer, sceneNameLength, "scene.${device_name}%.0f", x); 
                std::string sceneName = sceneNameCharBuffer;
                ESP_LOGI("scene", "Setting scene: %s %d", sceneName.c_str(), sceneName.length()); 
                return sceneName.c_str();
