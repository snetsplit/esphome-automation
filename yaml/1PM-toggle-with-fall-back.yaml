#source for orginal: https://www.esphome-devices.com/devices/Shelly-1PM
globals:
   - id: basic_edge_switch_1_toggle_boolean
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: too_hot_boolean
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: auto_off_boolean_1
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: sunrise_enabled_boolean_1
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: sunset_enabled_boolean_1
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: sunrise_event_fired_1
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: sunset_event_fired_1
     type: bool
     restore_value: true
     initial_value: 'false'

substitutions:
  nice_name: "1PM Shelly"
  device_name: "shelly1pm"
  name: ${device_name}
  friendly_name: "${nice_name} Shelly"
  restore_mode: RESTORE_DEFAULT_ON
  light_automation_input_number_min: '0'
  light_automation_input_number_max: '2'
  
  
  
  home_assistant_host: "home.lan"
  ping_rate: 16sec
  address: "${device_name}-switch.lan"
  web_server_port: "80"
  ssid: "IP freely"
  password: "ewwwwwwwww"
  
  latitude: 48.8584째
  longitude: 2.2945째
  
  time_server: "0.pool.ntp.org"

i2c:
  sda: GPIO12
  scl: GPIO14

api:

ota:

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  comment: ${friendly_name}
  libraries:
    - ESP8266WiFi
    - https://github.com/akaJes/AsyncPing#95ac7e4

time:
  - platform: sntp
    id: sntp_time
    servers: 
      - ${time_server}
wifi:
  ssid: ${ssid}
  password: ${password}
  use_address: ${address}
  ap:
    ssid: "${nice_name} Fallback"
    password: ${password}


web_server:
  port: ${web_server_port}
  local: true
  
captive_portal:



switch:
  - platform: gpio
    name: "${nice_name} Switch Relay"
    pin: GPIO15
    id: shelly_relay
    entity_category: config
    icon: "mdi:electric-switch"
    restore_mode: ${restore_mode}
    on_turn_on:
      - if:
           condition:
             - lambda: return (id(auto_off_boolean_1) && (id(off_scene_1).state == id(${device_name}_scene).state));
           then:
             - number.set:
                 id: "${device_name}_scene"
                 value: !lambda 'return id(on_scene_1).state;'
           else:                         
    
  - platform: template
    name: "${nice_name} Switch Edge Mode"
    id: "basic_edge_switch_toggle_switch_1"
    optimistic: false
    restore_state: true
    entity_category: config
    turn_on_action:
      - globals.set:
          id: basic_edge_switch_1_toggle_boolean
          value: 'true'
    turn_off_action:
      - globals.set:
          id: basic_edge_switch_1_toggle_boolean
          value: 'false'
    lambda: |-
      return id(basic_edge_switch_1_toggle_boolean);

  - platform: template
    name: "${nice_name} Auto Off"
    id: "auto_off_switch"
    optimistic: false
    entity_category: config
    restore_state: true
    turn_on_action:
      - globals.set:
          id: auto_off_boolean_1
          value: 'true'
    turn_off_action:
      - globals.set:
          id: auto_off_boolean_1
          value: 'false'
    lambda: return id(auto_off_boolean_1);

  - platform: template
    name: "${nice_name} Sunrise Scene Enabled"
    id: "sunrise_enabled_switch"
    optimistic: false
    entity_category: config
    restore_state: true
    turn_on_action:
      - globals.set:
          id: sunrise_enabled_boolean_1
          value: 'true'
    turn_off_action:
      - globals.set:
          id: sunrise_enabled_boolean_1
          value: 'false'
    lambda: |-
      return id(sunrise_enabled_boolean_1);

  - platform: template
    name: "${nice_name} Sunset Scene Enabled"
    id: "sunset_enabled_switch"
    optimistic: false
    entity_category: config
    restore_state: true
    turn_on_action:
      - globals.set:
          id: sunset_enabled_boolean_1
          value: 'true'
    turn_off_action:
      - globals.set:
          id: sunset_enabled_boolean_1
          value: 'false'
    lambda: |-
      return id(sunset_enabled_boolean_1);
 
sensor:
  - platform: sun
    name: Sun Elevation
    type: elevation
    on_value:
      then:
         if:
            condition:
              lambda: 'return !id(sunrise_event_fired_1) && id(sunrise_elevation_1).state > x;'
          then:
           - global.set:
               id: "sunrise_event_fired_1"
               value: true;
           - global.set:
               id: "sunset_event_fired_1"
               value: false;
           - number.set:
               id: "${device_name}_scene"
               value: !lambda 'return id(sunrise_scene_1).state;'
          else:
         if:
          condition:
              lambda: 'return !id(sunset_event_fired_1) && id(sunset_elevation_1).state < x;'
          then:
           - global.set:
               id: "sunset_event_fired_1"
               value: true;
           - global.set:
               id: "sunrise_event_fired_1"
               value: false;
           - number.set:
               id: "${device_name}_scene"
               value: !lambda 'return id(sunset_scene_1).state;'
          else:
  - platform: sun
    name: Sun Azimuth
    type: azimuth
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    device_class: signal_strength
    update_interval: 60s
  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "${nice_name} Watts"
      unit_of_measurement: W
      id: "shelly1pm_power"
      device_class: power
      state_class: measurement
      accuracy_decimals: 0
      filters:
      # Map from sensor -> measured value
      - calibrate_linear:
          - 0.0 -> 1.0
          - 110.33186 -> 20.62
          - 131.01909 -> 24.32
          - 341.33920 -> 62.08
          - 5561.41553 -> 1000.0
          - 2975.51221 -> 535.7
          - 9612.66309 -> 1720.0
          - 14891.35352 -> 2679.0
      # Make everything below 2W appear as just 0W.
      - lambda: if (x < 2) return 0; else return x;
      on_value_range:
        - above: !lambda return id(max_power).state;
          then:
            - switch.turn_off: shelly_relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${friendly_name}
                data_template:
                  message: !lambda  |- 
                   int sceneNameLength = 64;
                   char sceneNameCharBuffer[sceneNameLength]; 
                   std::snprintf(sceneNameCharBuffer, sceneNameLength, "Switch turned off because power exceeded %fW", id(max_power).state); 
                   std::__cxx11::basic_string sceneName = sceneNameCharBuffer;
                   return sceneName;  
    update_interval: 10s

  - platform: total_daily_energy
    name: "${nice_name} Watts Last 24 hours"
    power_id: "shelly1pm_power"
    device_class: energy
    state_class: measurement
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: ntc
    sensor: temp_resistance_reading
    name: "${nice_name} Temperature"
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: !lambda 'return id(max_temp).state;'
        then:
          - globals.set:
              id: too_hot_boolean
              value: 'true'
          - switch.turn_off: shelly_relay
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${friendly_name}
              data_template:
                message: !lambda  |- 
                   int sceneNameLength = 64;
                   char sceneNameCharBuffer[sceneNameLength]; 
                   std::snprintf(sceneNameCharBuffer, sceneNameLength, "Switch turned off because temperature exceeded %f째C", id(max_temp).state); 
                   std::__cxx11::basic_string sceneName = sceneNameCharBuffer;
                   return sceneName;
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "${friendly_name} has overheated."
      - below: !lambda 'return id(max_temp).state;'
        then:
          - globals.set:
              id: too_hot_boolean
              value: 'false'
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0
    
  - platform: ping
    ip_address: ${home_assistant_host}
    num_attempts: 1
    timeout: 1sec

    loss:
      id: packet_loss
      name: "Home Assistant Packet Loss"

    latency:
      id: latency
      name: "Home Assistant Latency"
      accuracy_decimals: 3

    update_interval: ${ping_rate}


output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true


external_components:
  - source: github://trombik/esphome-component-ping
    components: [ ping ]
    
     
binary_sensor:
  - platform: gpio
    pin: GPIO16
    name: "ade7953 IRQ pin"
    internal: true
  - platform: gpio
    pin:
      number: GPIO4
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: "${friendly_name} External Switch"
    on_state:
      then:
      - number.increment:
          id: "${device_name}_scene"
          cycle: true
    internal: false
    id: switchid
    

number:
  - platform: template
    name: "${nice_name} Auto Off Time in ms"
    id: "auto_off_wait_time_1"
    optimistic: true
    entity_category: config
    min_value: 1
    max_value: 4294967295
    mode: box
    restore_value: true
    initial_value: 1
    step: 1
  - platform: template
    name: "${nice_name} On Scene"
    id: "on_scene_1"
    optimistic: true
    entity_category: config
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    initial_value: 1
    step: 1
  - platform: template
    name: "${nice_name} Off Scene"
    id: "off_scene_1"
    optimistic: true
    entity_category: config
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    initial_value: 0
    step: 1
  - platform: template
    name: "${nice_name} Sunrise Elevation Degrees"
    id: "sunrise_elevation_1"
    optimistic: true
    entity_category: config
    min_value: -90
    max_value: 90
    mode: box
    restore_value: true
    initial_value: -0.833
    step: 0.001
  - platform: template
    name: "${nice_name} Sunrise Scene"
    id: "sunrise_scene_1"
    optimistic: true
    entity_category: config
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    initial_value: 1
    step: 1
  - platform: template
    name: "${nice_name} Sunset Elevation Degrees"
    id: "sunset_elevation_1"
    optimistic: true
    entity_category: config
    min_value: -90
    max_value: 90
    mode: box
    restore_value: true
    initial_value: -0.833
    step: 0.001
  - platform: template
    name: "${nice_name} Sunset Scene"
    id: "sunset_scene_1"
    optimistic: true
    entity_category: config
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    initial_value: 0
    step: 1
  - platform: template
    name: "${nice_name} Max Temp"
    id: "max_temp"
    optimistic: true
    entity_category: config
    min_value: 40
    max_value: 80
    restore_value: true
    initial_value: 70
    step: 1
  - platform: template
    name: "${nice_name} Max Power"
    id: "max_power"
    optimistic: true
    entity_category: config
    min_value: 0
    max_value: 1600
    initial_value: 1600
    restore_value: true
    step: 1
  - platform: template
    name: "${nice_name} Switch Scene"
    id: "${device_name}_scene"
    optimistic: true
    entity_category: config
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    step: 1
    on_value:
      then:
      - if:
          condition:
            and:
              - wifi.connected:
              - api.connected:
              - lambda: return ((id(packet_loss).state < 100) && !id(basic_edge_switch_1_toggle_boolean) && !id(too_hot_boolean));
          then:
            - homeassistant.service:
               service: scene.turn_on
               data_template: 
                 entity_id: !lambda  |- 
                   int sceneNameLength = 64;
                   char sceneNameCharBuffer[sceneNameLength]; 
                   std::snprintf(sceneNameCharBuffer, sceneNameLength, "scene.${device_name}%.0f", x); 
                   ESP_LOGI("scene", "Setting scene: [%s]", sceneNameCharBuffer); 
                   std::__cxx11::basic_string sceneName = sceneNameCharBuffer;
                   return sceneName;
          else:
            - if:
                 condition:
                   - lambda: return (id(off_scene_1).state == x);
                 then:
                   - switch.turn_off: shelly_relay
                 else:
                   - switch.turn_on: shelly_relay
      - if:
           condition:
             - lambda: return (id(auto_off_boolean_1) && id(off_scene_1).state != x);
           then:
             - delay: !lambda 'return static_cast<unsigned int>(id(auto_off_wait_time_1).state);'
             - number.set:
                 id: "${device_name}_scene"
                 value: !lambda 'return id(off_scene_1).state;'
           else:
    
sun:
  latitude: ${latitude}
  longitude: ${longitude}
