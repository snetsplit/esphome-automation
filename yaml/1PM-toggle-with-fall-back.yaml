#source for orginal: https://www.esphome-devices.com/devices/Shelly-1PM
#NOT COMPLETE. NOT WARRENTIED. USE AT OWN RISK.
globals:
   - id: basic_edge_switch_toggle_boolean
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: too_hot_boolean
     type: bool
     restore_value: false
     initial_value: 'false'
   - id: dont_ignore_sun_1
     type: bool
     restore_value: false
     initial_value: ${dont_ignore_sun_1}
   - id: scene_light_index_1
     type: unsigned int
     restore_value: no
     initial_value: '0'
   - id: scene_light_host_string_1
     type: const std::vector<std::string>
     initial_value: ${scene_light_host_string_1}
     
substitutions:
  nice_name: "1PM Shelly"
  sys_name: "1pm"
  device_name: ${sys_name}_switch
  name: ${sys_name}-switch
  max_temp: "80.0"
  max_power: "1600.0"
  friendly_name: "${nice_name} Shelly 1PM scenes"
  restore_mode: RESTORE_DEFAULT_ON
  light_automation_input_number_min: '0'
  light_automation_input_number_max: '2'
  dont_ignore_sun_1: "true"
  
  auto_off_boolean_1: "false"
  off_scene_1: '0'
  on_scene_1: '1'
  delay_time_1: "1min"
  scene_light_host_string_1: ""
  
  home_assistant_host: "home.lan"
  ping_rate: 16sec
  domain: ".local"
  web_server_port: "80"
  ssid: "IP freely"
  password: "ewwwwwwwww"
  
  sunrise_enabled: "true"
  sunset_enabled: "true"
  sunrise_scene: "0"
  sunset_scene: "1"
  latitude: 48.8584째
  longitude: 2.2945째
  sunrise_elevation: "-0.833"
  sunset_elevation: "-0.833"
  
  time_server: "0.pool.ntp.org"

i2c:
  sda: GPIO12
  scl: GPIO14
  
api:
   reboot_timeout: 0s
   
ota:

logger:

esphome:
  name: ${name}
  platform: ESP8266
  board: esp01_1m
  comment: ${friendly_name}
  libraries:
    - ESP8266WiFi
    - https://github.com/akaJes/AsyncPing#95ac7e4

  on_boot:
    priority: 200
    then:
       - if:
            condition:
              - lambda: return (${off_scene_1}.0 == id(${device_name}_scene).state);
            then:
              - switch.turn_on: shelly_relay_1
            else:
            
time:
  - platform: sntp
    id: sntp_time
    servers: 
      - ${time_server}

wifi:
  ssid: ${ssid}
  password: ${password}
  domain: ${domain}
  ap:
    ssid: "${nice_name} Fallback"
    password: ${password}
  power_save_mode: HIGH # for ESP8266 LOW/HIGH are mixed up, esphome/issues/issues/1532

web_server:
  port: ${web_server_port}
  local: true
  
captive_portal:

http_request:
  id: http_request_data
  useragent: esphome/device
  timeout: 2s
  esp8266_disable_ssl_support: true

switch:
  - platform: gpio
    name: "${nice_name} Switch Relay"
    pin: GPIO15
    id: shelly_relay_1
    icon: "mdi:electric-switch"
    restore_mode: ${restore_mode}
    on_turn_on:
      - if:
           condition:
             - lambda: return (${auto_off_boolean_1} && (${off_scene_1}.0 == id(${device_name}_scene).state));
           then:
             - number.set:
                 id: "${device_name}_scene"
                 value: ${on_scene_1}
           else:                         
    
  - platform: template
    name: "${nice_name} Switch Edge Mode"
    id: "basic_edge_switch_toggle_switch"
    optimistic: false
    restore_state: true
    turn_on_action:
      - globals.set:
          id: basic_edge_switch_toggle_boolean
          value: 'true'
    turn_off_action:
      - globals.set:
          id: basic_edge_switch_toggle_boolean
          value: 'false'
    lambda: |-
      return id(basic_edge_switch_toggle_boolean);
      
sensor:
  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    device_class: signal_strength
    update_interval: 60s
  - platform: hlw8012
    cf_pin: GPIO05
    cf1_pin: GPIO13 # not used because it is not available on the 1PM but it is needed to compile
    sel_pin: GPIO14 # not used because it is not available on the 1PM but it is needed to compile
    power:
      name: "${nice_name} Watts"
      unit_of_measurement: W
      id: "shelly1pm_power"
      device_class: power
      state_class: measurement
      accuracy_decimals: 0
      filters:
      # Map from sensor -> measured value
      - calibrate_linear:
          - 0.0 -> 1.0
          - 110.33186 -> 20.62
          - 131.01909 -> 24.32
          - 341.33920 -> 62.08
          - 5561.41553 -> 1000.0
          - 2975.51221 -> 535.7
          - 9612.66309 -> 1720.0
          - 14891.35352 -> 2679.0
      # Make everything below 2W appear as just 0W.
      - lambda: if (x < 2) return 0; else return x;
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: shelly_relay_1
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${friendly_name}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W      
    update_interval: 10s

  - platform: total_daily_energy
    name: "${nice_name} Watts Last 24 hours"
    power_id: "shelly1pm_power"
    device_class: energy
    state_class: measurement
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: ntc
    sensor: temp_resistance_reading
    name: "${nice_name} Temperature"
    unit_of_measurement: "째C"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - globals.set:
              id: too_hot_boolean
              value: 'true'
          - switch.turn_off: shelly_relay_1
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${friendly_name}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}째C
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "${friendly_name} has overheated."
      - below: ${max_temp}
        then:
          - globals.set:
              id: too_hot_boolean
              value: 'false'
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0
    
  - platform: ping
    ip_address: ${home_assistant_host}
    num_attempts: 1
    timeout: 1sec

    loss:
      id: packet_loss
      name: "Home Assistant Packet Loss"

    latency:
      id: latency
      name: "Home Assistant Latency"
      accuracy_decimals: 3

    update_interval: ${ping_rate}


output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true


external_components:
  - source: github://trombik/esphome-component-ping
    components: [ ping ]
    

text_sensor:
  - platform: template
    name: "Current time"
    lambda: |-
      char str[17];
      time_t currTime = id(sntp_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return  { str };
    update_interval: 60s
  - platform: sun
    name: Sunrise
    type: sunrise
  - platform: sun
    name: Sunset
    type: sunset
    filters:
      - lambda: |-  
           char clock24[3] = "  ";
           clock24[0] = x[0];
           clock24[1] = x[1];
           return clock24[0].c_str();

button:
  - platform: restart
    id: restart_button
    name: "${friendly_name} Restart"  

binary_sensor:
  - platform: gpio
    pin: GPIO16
    name: "ade7953 IRQ pin"
    internal: true
  - platform: gpio
    pin:
      number: GPIO4
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: "${friendly_name} External Switch"
    on_state:
      then:
      - number.increment:
          id: "${device_name}_scene"
          cycle: true
    internal: false
    id: switchid

number:
  - platform: template
    name: "${nice_name} Switch Scene"
    id: "${device_name}_scene"
    optimistic: true
    min_value: ${light_automation_input_number_min}
    max_value: ${light_automation_input_number_max}
    restore_value: true
    step: 1
    on_value:
      then:
      - if:
            condition:
              and:
                - sun.is_above_horizon:
                - lambda: return ((${light_automation_input_number_max} != 1) && (x == 1) && ${dont_ignore_sun_1});
            then:
              - number.increment:
                   id: "${device_name}_scene"
                   cycle: true
            else:
              - if:
                  condition:
                    and:
                      - wifi.connected:
                      - api.connected:
                      - lambda: return ((id(packet_loss).state < 100) && !id(basic_edge_switch_toggle_boolean) && !id(too_hot_boolean));
                  then:
                      - homeassistant.service:
                          service: scene.turn_on
                          data_template: 
                            entity_id: !lambda  |- 
                              int sceneNameLength = 64;
                              char sceneNameCharBuffer[sceneNameLength]; 
                              std::snprintf(sceneNameCharBuffer, sceneNameLength, "scene.${device_name}%.0f", x); 
                              ESP_LOGI("scene", "Setting scene: [%s]", sceneNameCharBuffer); 
                              std::__cxx11::basic_string sceneName = sceneNameCharBuffer;
                              return sceneName;
                  else:
                    - if:
                        condition:
                          - lambda: return (${off_scene_1}.0 == x);
                        then:
                          - switch.turn_off: shelly_relay_1
                        else:
                          - switch.turn_on: shelly_relay_1
              - if:
                  condition:
                    - lambda: return (${auto_off_boolean_1} && ${off_scene_1}.0 != x);
                  then:
                    - delay: ${delay_time_1}
                    - number.set:
                        id: "${device_name}_scene"
                        value: ${off_scene_1}
                  else:
              - lambda: id(scene_light_index_1) = 0;
              - while:
                  condition:
                    - lambda: return (id(scene_light_index_1) < id(scene_light_host_string_1).size());
                  then:
                    - http_request.post: !lambda |- 
                                std::string sceneName = "http://" + id(scene_light_host_string_1).at(id(scene_light_index_1)) + "/number/scene/set?value=" + std::to_string(int(x));
                                ESP_LOGI("scene", "Setting switch at: [%s]", sceneName); 
                                id(scene_light_index_1) += 1;
                                return sceneName;  
                         
sun:
  latitude: ${latitude}
  longitude: ${longitude}

  on_sunrise:
    - then:
    - elevation: ${sunrise_elevation} 
      then: 
        - if:
             condition:
               - lambda: return  ${sunrise_enabled};
             then:
               - number.set:
                   id: "${device_name}_scene"
                   value: ${sunrise_scene}

  on_sunset:
    - then:
    - elevation: ${sunset_elevation} 
      then: 
        - if:
             condition:
               - lambda: return  ${sunset_enabled};
             then:
               - number.set:
                   id: "${device_name}_scene"
                   value: ${sunset_scene}
