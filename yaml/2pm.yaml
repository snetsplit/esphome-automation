#source for orginal: https://www.esphome-devices.com/devices/Shelly-1PM
#NOT COMPLETE. NOT WARRENTIED. USE AT OWN RISK.
substitutions:
  max_power_1: "1000.0"
  max_power_2: "1000.0"
  restore_mode_2: RESTORE_DEFAULT_ON
  light_automation_input_number_max_2: '2'
  scene_light_host_string_2: ""
  scene_master_host_2: ""
  light_settings_string_2: '{{"light.turn_off"},{"light.turn_on","kelvin","2700","brightness_pct","30"},{"light.turn_on","kelvin","4587","brightness_pct","100"}}'
  light_entities_count_2: "2"
  scene_icon_2: "mdi:ceiling-light-outline"
  friendly_relay_name_2: "${friendly_name} B"
  device_relay_name_2: "${device_name}_b"
  relay_gpio_2: "GPIO15"
  external_switch_gpio_1: "GPIO5"
  relay_gpio_1: "GPIO4"
  external_switch_gpio_2: "GPIO13"
  friendly_relay_name_1: "${friendly_name} A"
  device_relay_name_1: "${device_name}_a"
  light_name_1: "light.${device_relay_name_1}"
  light_name_2: "light.${device_relay_name_2}"
  
globals:
   - id: ${device_relay_name_2}_scene_light_index
     type: unsigned int
     restore_value: no
     initial_value: '0'
   - id: ${device_relay_name_2}_scene_light_host_string
     type: const std::vector<std::string>
     initial_value: ${scene_light_host_string_2}
   - id: ${device_relay_name_2}_light_settings_string
     type: const std::vector<std::vector<std::string>>
     initial_value: ${light_settings_string_2}
   - id: ${device_relay_name_2}_scene_master_host
     type: std::string
     initial_value: ${scene_master_host_2}

esphome:
  on_boot:
    priority: 200
    then:
       - if:
            condition:
              - lambda: return (0.0 != id(${device_relay_name_2}_scene).state);
            then:
              - switch.turn_on: ${device_relay_name_2}_shelly_relay

i2c:
  sda: GPIO12
  scl: GPIO14
  
switch:
  - platform: gpio
    name: "${friendly_relay_name_2} Relay"
    pin: ${relay_gpio_2}
    id: ${device_relay_name_2}_shelly_relay
    icon: "mdi:electric-switch"
    restore_mode: ${restore_mode_2}

sensor:
  - platform: ade7953
    irq_pin: GPIO16 # Prevent overheating by setting this
    voltage:
      name: ${friendly_name} Voltage
    current_a:
      name: ${friendly_relay_name_2} current
      internal: true
    active_power_a:
      name: "${friendly_relay_name_2} Watts"
      id: power_channel_2
      on_value_range:
        - above: ${max_power_2}
          then:
            - switch.turn_off: ${device_relay_name_2}_shelly_relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from  ${friendly_name} - ${friendly_relay_name_2}
                data_template:
                  message: Switch turned off because power exceeded ${max_power_2}W
    current_b:
      name: ${friendly_relay_name_1} current
      internal: true
    active_power_b:
      name: "${friendly_relay_name_1} Watts"
      id: power_channel_1
      # active_power_b is inverted, so multiply by -1
      filters:
      - multiply: -1
      on_value_range:
        - above: ${max_power_1}
          then:
            - switch.turn_off: ${device_relay_name_1}_shelly_relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from  ${friendly_name} - ${friendly_relay_name_1}
                data_template:
                  message: Switch turned off because power exceeded ${max_power_1}W

    update_interval: 30s

number:
  - platform: template
    name: "${friendly_relay_name_2} Scene"
    id: "${device_relay_name_2}_scene"
    icon: "${scene_icon_2}"
    optimistic: true
    min_value: 0
    max_value: ${light_automation_input_number_max_2}
    restore_value: false
    initial_value: 1
    step: 1
    on_value:
      then:
          - lambda: |-
                        if(id(${device_name}_sun_enabled) && (id(sun_id).elevation() > ${day_elevation}) && (1 == x) && (id(${device_relay_name_2}_scene).traits.get_max_value() > 1)) {
                           id(${device_relay_name_2}_scene).make_call().number_increment(false).perform();
                           return;
                        }
                        
                        bool relayNoFlip = false;
                        if((${light_entities_count_2} > 0) && id(api_id).is_connected()) {
                          id(${device_relay_name_2}_shelly_relay).turn_on();
                          const std::vector<std::string> attributes = id(${device_relay_name_2}_light_settings_string)[int(x)];
                          int index = 1;
                          HomeassistantServiceResponse resp;
                          resp.service = attributes[0];
                          HomeassistantServiceMap entity_key_value;
                          entity_key_value.key = "entity_id";
                          while(index <= ${light_entities_count_2}) {
                                entity_key_value.value += "${light_name_2}" + std::to_string(index);
                                if(index < ${light_entities_count_2})  {
                                  entity_key_value.value += ",";
                               }
                                index++;
                            }
                            resp.data.push_back(entity_key_value);
                            index = 1;
                            while(index < attributes.size()) {
                                HomeassistantServiceMap attribute_key_value;
                                attribute_key_value.key = attributes[index++];
                                attribute_key_value.value = attributes[index++]; 
                                resp.data.push_back(attribute_key_value);
                            }
                            id(api_id).send_homeassistant_service_call(resp);
                            relayNoFlip = true;
                         }
                         if (( id(${device_relay_name_2}_scene_light_host_string).size() > 0)  && id(wifi_id).is_connected()) {
                            esphome::http_request::HttpRequestComponent httpRequestComponent = esphome::http_request::HttpRequestComponent();
                            httpRequestComponent.set_method("POST");
                            for(std::string host_path : id(${device_relay_name_2}_scene_light_host_string)) {
                                httpRequestComponent.set_url("http://" +host_path + "/set?value=" + std::to_string(int(x)));
                                httpRequestComponent.send({});
                            }
                            httpRequestComponent.close();
                            relayNoFlip = true;
                        }
                        
                        if(!relayNoFlip && (0 == x)) {
                                id(${device_relay_name_2}_shelly_relay).turn_off();
                        }else if(!relayNoFlip && (id(${device_relay_name_2}_scene).traits.get_max_value() == x)) {
                                id(${device_relay_name_2}_shelly_relay).turn_on();
                        } else if(!relayNoFlip) {
                                id(${device_relay_name_2}_scene).make_call().number_to_max().perform();
                                return;
                        }


binary_sensor:
  - platform: gpio
    pin:
      number: ${external_switch_gpio_2}
    filters:
      - delayed_on_off: 50ms # small delay to prevent debouncing
    name: "${friendly_relay_name_2} External Switch"
    internal: false
    id: "${device_relay_name_2}_actual_switch"
    on_state:
      then:
      - number.increment:
          id: "${device_relay_name_2}_scene"
          cycle: true

packages:
  base: 
    url: https://github.com/snetsplit/esphome-automation
    file: yaml/base/pm-esp8266.yaml
    refresh: 1s
