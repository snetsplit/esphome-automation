#source for orginal: https://www.esphome-devices.com/devices/Shelly-1PM
#NOT COMPLETE. NOT WARRENTIED. USE AT OWN RISK.
globals:
   - id: too_hot_boolean
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: scene_light_index_1
     type: unsigned int
     restore_value: no
     initial_value: '0'
   - id: sunrise_scene
     type: unsigned int
     restore_value: true
     initial_value: '0'
   - id: sunset_scene
     type: unsigned int
     restore_value: true
     initial_value: '1'
   - id: scene_light_host_string_1
     type: const std::vector<std::string>
     initial_value: ${scene_light_host_string_1}
   - id: light_settings_string_1
     type: const std::vector<std::vector<std::string>>
     initial_value: ${light_settings_string_1}
   - id: scene_master_host_1
     type: std::string
     initial_value: ${scene_master_host_1}
   - id: edge_switch
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: scene_switch
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: http_switch
     type: bool
     restore_value: true
     initial_value: 'false'
   - id: auto_off_timer
     type: bool
     restore_value: false
     initial_value: 'false'
     
substitutions:
  device_type: "switch"
  device_type_nice: "Switch"
  max_temp: "60.0"
  max_power: "1600.0"
  restore_mode: RESTORE_DEFAULT_ON
  light_automation_input_number_max: '2'
  scene_light_host_string_1: ""
  scene_master_host_1: ""
  light_settings_string_1: '{{"light.turn_off"},{"light.turn_on","kelvin","2700","brightness_pct","30"},{"light.turn_on","kelvin","4587","brightness_pct","100"}}'
  light_entities_count_1: "2"
  
esphome:
  on_boot:
    priority: 200
    then:
       - if:
            condition:
              - lambda: return (0.0 != id(${device_name}_scene).state);
            then:
              - switch.turn_on: shelly_relay_1


switch:
  - platform: gpio
    name: "${friendly_name} Switch Relay"
    pin: GPIO15
    id: shelly_relay_1
    icon: "mdi:electric-switch"
    restore_mode: ${restore_mode}
    on_turn_on:
      - if:
           condition:
             - lambda: return (id(auto_off_timer) && (0.0 == id(${device_name}_scene).state));
           then:
             - number.set:
                 id: "${device_name}_scene"
                 value: 1
  - platform: template
    name: "${friendly_name} Switch Edge Mode"
    id: "basic_edge_switch_toggle_switch"
    optimistic: false
    restore_state: true
    turn_on_action:
      - globals.set:
          id: edge_switch
          value: 'true'
    turn_off_action:
      - globals.set:
          id: edge_switch
          value: 'false'
    lambda: |-
      return id(edge_switch);
  - platform: template
    name: "${friendly_name} HA Lights"
    id: "scene_switch_toggle"
    optimistic: false
    restore_state: true
    turn_on_action:
      - globals.set:
          id: scene_switch
          value: 'true'
    turn_off_action:
      - globals.set:
          id: scene_switch
          value: 'false'
    lambda: |-
      return id(scene_switch);
  - platform: template
    name: "${friendly_name} http control"
    id: "http_switch_toggle"
    optimistic: false
    restore_state: true
    turn_on_action:
      - globals.set:
          id: http_switch
          value: 'true'
    turn_off_action:
      - globals.set:
          id: http_switch
          value: 'false'
    lambda: |-
      return id(http_switch);
  - platform: template
    name: "${friendly_name} Auto Off"
    id: "auto_off_switch_toggle"
    optimistic: false
    restore_state: true
    turn_on_action:
      - globals.set:
          id: auto_off_timer
          value: 'true'
    turn_off_action:
      - globals.set:
          id: auto_off_timer
          value: 'false'
    lambda: |-
      return id(auto_off_timer);

sensor:
  - platform: ntc
    sensor: temp_resistance_reading
    name: "${friendly_name} Shelly Temperature"
    unit_of_measurement: "°c"
    accuracy_decimals: 1
    device_class: temperature
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - globals.set:
              id: too_hot_boolean
              value: 'true'
          - switch.turn_off: shelly_relay_1
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${friendly_name}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}°C
          - homeassistant.event:
              event: esphome.overheat
              data:
                title: "${friendly_name} has overheated."
      - below: ${max_temp}
        then:
          - globals.set:
              id: too_hot_boolean
              value: 'false'

number:
  - platform: template
    icon: "mdi:bulb-group-outline"
    name: "${friendly_name} Scene"
    id: "${device_name}_scene"
    optimistic: true
    min_value: 0
    max_value: ${light_automation_input_number_max}
    restore_value: true
    step: 1
    on_value:
      then:
          - lambda: |-
                        if(id(sun_enabled) && (id(sun_id).elevation() > ${day_elevation}) && (1 == x) && (id(${device_name}_scene).traits.get_max_value() > 1)) {
                           id(${device_name}_scene).make_call().number_increment(false).perform();
                           return;
                        }
                                    ESP_LOGI("woo","key %f",x);
                        bool relayNoFlip = false;
                        if(!id(edge_switch) && id(scene_switch) && id(api_id).is_connected()  && id(wifi_id).is_connected()) {
                          const std::vector<std::string> attributes = id(light_settings_string_1)[int(x)];
                          int index = 1;
                          HomeassistantServiceResponse resp;
                          resp.service = attributes[0];
                          while(index <= ${light_entities_count_1}) {
                                HomeassistantServiceMap entity_key_value;
                                entity_key_value.key = "entity_id";
                                entity_key_value.value = "light.${sys_name}" + std::to_string(index);
                                resp.data.push_back(entity_key_value);
                                index++;
                                if(index < ${light_entities_count_1})  {
                                  entity_key_value.value += ",";
                               }
                            }
                            index = 1;
                            while(index < attributes.size()) {
                                HomeassistantServiceMap attribute_key_value;
                                attribute_key_value.key = attributes[index++];
                                attribute_key_value.value = attributes[index++]; 
                                resp.data.push_back(attribute_key_value);
                            }
                            id(api_id).send_homeassistant_service_call(resp);
                            relayNoFlip = true;
                         }
                         if (!id(edge_switch) && id(http_switch)  && id(wifi_id).is_connected()) {
                            esphome::http_request::HttpRequestComponent httpRequestComponent = esphome::http_request::HttpRequestComponent();
                            httpRequestComponent.set_method("POST");
                            for(std::string host_path : id(scene_light_host_string_1)) {
                                httpRequestComponent.set_url("http://" +host_path + "/set?value=" + std::to_string(int(x)));
                                httpRequestComponent.send({});
                            }
                            httpRequestComponent.close();
                            relayNoFlip = true;
                        }
                        
                        if(!relayNoFlip && (0 == x)) {
                                id(shelly_relay_1).turn_off();
                        }else if(!relayNoFlip && (id(${device_name}_scene).traits.get_max_value() == x)) {
                                id(shelly_relay_1).turn_on();
                        } else if(!relayNoFlip) {
                                id(${device_name}_scene).make_call().number_to_max().perform();
                                return;
                        }
          - if:
               condition:
                 - lambda: return (id(auto_off_timer) && (0.0 < id(${device_name}_scene).state));
               then:
                 - delay: !lambda return int(id(${device_name}_auto_off_seconds).state) * 1000;
                 - number.set:
                     id: "${device_name}_scene"
                     value: 0
  - platform: template
    icon: "mdi:clock"
    name: "${friendly_name} Auto Off Seconds"
    id: "${device_name}_auto_off_seconds"
    optimistic: true
    min_value: 0
    max_value: 8640
    mode: box
    unit_of_measurement: "s"
    restore_value: true
    step: 1
  - platform: template
    icon: "mdi:clock"
    name: "${friendly_name} Sunrise Scene"
    id: "${device_name}_sunrise_scene"
    optimistic: true
    min_value: 0
    max_value: ${light_automation_input_number_max}
    restore_value: true
    step: 1
  - platform: template
    icon: "mdi:clock"
    name: "${friendly_name} Sunset Scene"
    id: "${device_name}_sunset_scene"
    optimistic: true
    min_value: 0
    max_value: ${light_automation_input_number_max}
    restore_value: true
    step: 1

sun:
  on_sunrise:
    - elevation: ${day_elevation} 
      then: 
        - if:
             condition:
               - lambda: return  id(sunrise_enabled);
             then:
               - number.set:
                   id: "${device_name}_scene"
                   value: !lambda return id(sunrise_scene);

  on_sunset:
    - elevation: ${day_elevation} 
      then: 
        - if:
             condition:
               - lambda: return  id(sunset_enabled);
             then:
               - number.set:
                   id: "${device_name}_scene"
                   value: !lambda return id(sunset_scene);

packages:
  base: 
    url: https://github.com/snetsplit/esphome-automation
    file: yaml/base/pm-esp8266.yaml
    refresh: 1d
  sun: 
    url: https://github.com/snetsplit/esphome-automation
    file: yaml/base/sun.yaml
    refresh: 1d