globals:
   - id: auto_mode
     type: bool
     restore_value: false
     initial_value: 'false'

substitutions:
  node_name: slwf-01pro-heatpump # Use a unique name.
  node_id: slwf_01pro_heatpump    # Use a unique id.
  friendly_node_name: "SLWF-01pro Heatpump"
  web_server_port: "80"
  ssid: "IP freely"
  password: "ewwwwwwwww"
  domain: ".local"
  time_server1: "0.pool.ntp.org"
  time_server2: "1.pool.ntp.org"
  time_server3: "2.pool.ntp.org"
  heat_on_below_set_temp: "3"
  cool_on_above_set_temp: "4"
  heat_turbo_on_below_set_temp: $heat_on_below_set_temp
  cool_turbo_on_above_set_temp: $cool_on_above_set_temp
  heat_turbo_off_above_set_temp: "1"
  cool_turbo_off_below_set_temp: $heat_turbo_off_above_set_temp
  external_thermometer_entity_1: sensor.rm4_mini_temperature
  external_thermometer_entity_2: sensor.bedroom_thermometer
  
esphome:
  name: ${node_name}
  comment: ${friendly_node_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: 600
    then:
      lambda: id(${node_id}_beeper).turn_on();

time:
  - platform: sntp
    id: sntp_time
    servers: 
      - ${time_server1}
      - ${time_server2}
      - ${time_server3}

wifi:
  ssid: ${ssid}
  password: ${password}
  domain: ${domain}
  ap:
    ssid: "${friendly_node_name} Fallback"
    password: ${password}
  power_save_mode: high

web_server:
  port: ${web_server_port}
  local: true


captive_portal:

# Enable Home Assistant API
api:

# Enable Over The Air updates
ota:

logger:
  level: WARN

# Binary 
binary_sensor:
  - platform: status
    name: ${friendly_node_name} Connection Status
    id: ${node_id}_connection_status

# Sensors.
sensor:
  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${friendly_node_name} Temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0
  - platform: uptime
    name: Uptime Sensor
    id: ${node_id}_uptime_sensor
    icon: mdi:clock-start
    update_interval: 60s
  - platform: wifi_signal
    name: ${friendly_node_name} WiFi Signal
    id: ${node_id}_wifi_signal
    update_interval: 60s
  - platform: homeassistant
    name: ${friendly_node_name} Room Tempreture 1 F
    id: ${node_id}_room_temperature_1_f
    entity_id: ${external_thermometer_entity_1}
    unit_of_measurement: °F
    internal: true
  - platform: homeassistant
    name: ${friendly_node_name} Room Tempreture 2 F
    id: ${node_id}_room_temperature_2_f
    unit_of_measurement: °F
    entity_id: ${external_thermometer_entity_2}
    internal: true
  - platform: template
    name: ${friendly_node_name} Room Tempreture °C Old
    id: ${node_id}_room_temperature_c_old
    lambda: |-
         return ((((id(${node_id}_room_temperature_1_f).state < id(${node_id}_room_temperature_2_f).state)?id(${node_id}_room_temperature_1_f).state:id(${node_id}_room_temperature_2_f).state) - 32.0) * 0.5556);;
    unit_of_measurement: °C
    update_interval: 15s

# Text Sensors.
text_sensor:
  - platform: version
    name: ${friendly_node_name} ESPHome Version
    id: ${node_id}_esphome_version    
  - platform: wifi_info
    ip_address:
      name: ${friendly_node_name} IP Address
      id: ${node_id}_ip_address
      icon: mdi:ip-network

switch:
  - platform: template
    name: ${friendly_node_name} Beeper
    id: ${node_id}_beeper
    icon: mdi:volume-source
    optimistic: true
    turn_on_action:
      midea_ac.beeper_on:
    turn_off_action:
      midea_ac.beeper_off:
  - platform: template
    name: ${friendly_node_name} Auto Mode
    id: ${node_id}_auto_mode
    icon: mdi:car-turbocharger
    optimistic: true
    lambda: return id(auto_mode);  
    turn_on_action:
        - lambda: |-
            id(auto_mode) = true;
            id(${node_id}_automation_lambda).press();
    turn_off_action:
        - lambda: |-
            id(auto_mode) = false;
  - platform: template
    name: ${friendly_node_name} Boost
    id: ${node_id}_boost
    icon: mdi:car-turbocharger
    optimistic: true
    lambda: return (id(${node_id}_my_climate).preset == ClimatePreset::CLIMATE_PRESET_BOOST);
    turn_on_action:
        - lambda: |-
            auto call = id(${node_id}_my_climate).make_call();
            call.set_preset(ClimatePreset::CLIMATE_PRESET_BOOST);
            call.perform();
    turn_off_action:
        - lambda: |-
            auto call = id(${node_id}_my_climate).make_call();
            call.set_preset(ClimatePreset::CLIMATE_PRESET_NONE);
            call.perform();

button:
  - platform: restart
    id: ${node_id}_restart_button
    name: "${friendly_node_name} Restart"
  - platform: template
    name: "${friendly_node_name} Display Toggle"
    id: ${node_id}_display_toggle
    icon: mdi:theme-light-dark
    on_press:
      midea_ac.display_toggle:
  - platform: template
    internal: true
    id: ${node_id}_automation_lambda
    on_press:
        - lambda: |-
                  if (id(auto_mode)) {
                       float tempDifference = id(${node_id}_my_climate).target_temperature - id(${node_id}_room_temperature_c).state;

                      ESP_LOGW(
                              "climate_temp", "difference: %f°F,  target: %f°F, room: %f°F", 
                              (tempDifference * 1.8), 
                              (id(${node_id}_my_climate).target_temperature * 1.8 + 32),
                              (id(${node_id}_room_temperature_c).state * 1.8 + 32)
                      );

                       if(tempDifference > $heat_on_below_set_temp) {
                          ESP_LOGW("climate_mode", "Mode: [%s]","heat");
                           if (ClimateMode::CLIMATE_MODE_HEAT != id(${node_id}_my_climate).mode) {
                              ESP_LOGW("climate_mode", "Mode: [%s]","setting mode heat");
                              id(${node_id}_my_climate).make_call().set_mode(ClimateMode::CLIMATE_MODE_HEAT).perform();
                           }
                           delay(2000);
                           if(tempDifference > $heat_turbo_on_below_set_temp) {
                              ESP_LOGW("climate_preset",    "Preset: [%s]", "boost");
                               if (ClimatePreset::CLIMATE_PRESET_BOOST !=  id(${node_id}_my_climate).preset.value()) {
                                  ESP_LOGW("climate_preset",    "Preset: [%s]", " setting boost heat");
                                  id(${node_id}_my_climate).make_call().set_preset(ClimatePreset::CLIMATE_PRESET_BOOST).perform();
                               } else if (tempDifference < -$heat_turbo_off_above_set_temp) {
                              ESP_LOGW("climate_preset",    "Preset: [%s]", "none");
                               if (ClimatePreset::CLIMATE_PRESET_NONE !=   id(${node_id}_my_climate).preset.value()) {
                                  ESP_LOGW("climate_preset",    "Preset: [%s]", " setting none heat");
                                  id(${node_id}_my_climate).make_call().set_preset(ClimatePreset::CLIMATE_PRESET_NONE).perform();
                               }
                              }
                           }
                      } else if(tempDifference < -$cool_on_above_set_temp) {
                          ESP_LOGW("climate_mode", "Mode: [%s]", "cool");
                           if (ClimateMode::CLIMATE_MODE_COOL != id(${node_id}_my_climate).mode) {
                              ESP_LOGW("climate_mode", "Mode: [%s]", "setting mode cool");
                              id(${node_id}_my_climate).make_call().set_mode(ClimateMode::CLIMATE_MODE_COOL).perform();
                           }
                           delay(2000);
                           if (tempDifference < -$cool_turbo_on_above_set_temp) {
                              ESP_LOGW("climate_preset",    "Preset: [%s]", "boost");
                               if (ClimatePreset::CLIMATE_PRESET_BOOST !=  id(${node_id}_my_climate).preset.value()) {
                                  ESP_LOGW("climate_preset",    "Preset: [%s]", " setting boost cool");
                                  id(${node_id}_my_climate).make_call().set_preset(ClimatePreset::CLIMATE_PRESET_BOOST).perform();
                               } else if  (tempDifference > $cool_turbo_off_below_set_temp) {
                              ESP_LOGW("climate_preset",    "Preset: [%s]", "none");
                               if (ClimatePreset::CLIMATE_PRESET_NONE !=   id(${node_id}_my_climate).preset.value()) {
                                  ESP_LOGW("climate_preset",    "Preset: [%s]", " setting none cool");
                                  id(${node_id}_my_climate).make_call().set_preset(ClimatePreset::CLIMATE_PRESET_NONE).perform();
                               }
                              }
                           }
                       }
                  }


number:
  - platform: template
    name: ${friendly_node_name} Room Tempreture °C
    id: ${node_id}_room_temperature_c
    optimistic: true
    min_value: -40
    max_value: 100
    restore_value: false
    step: 1
    on_value:
      then:
        - lambda: |-
            id(${node_id}_automation_lambda).press();


uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600

climate:
  - platform: midea
    id: ${node_id}_my_climate   # Use a unique id
    name: ${friendly_node_name}          # Use a unique name
    autoconf: true
    outdoor_temperature:
      id: ${node_id}_outside_tempreture   # Use a unique id
      name: ${friendly_node_name} Outside Tempreture
    on_state:
    - logger.log: "State updated!"
    - lambda: |-
         id(${node_id}_automation_lambda).press();
