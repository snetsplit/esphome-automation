globals:
   - id: auto_mode
     type: bool
     restore_value: false
     initial_value: 'false'

substitutions:
  node_name: slwf-01pro-heatpump # Use a unique name.
  node_id: slwf_01pro_heatpump    # Use a unique id.
  friendly_node_name: "SLWF-01pro Heatpump"
  web_server_port: "80"
  ssid: "IP freely"
  password: "ewwwwwwwww"
  domain: ".local"
  time_server1: "0.pool.ntp.org"
  time_server2: "1.pool.ntp.org"
  time_server3: "2.pool.ntp.org"
  heat_on_below_set_temp: "3"
  cool_on_above_set_temp: "4"
  heat_turbo_on_below_set_temp: $heat_on_below_set_temp
  cool_turbo_on_above_set_temp: $cool_on_above_set_temp
  heat_turbo_off_above_set_temp: "1"
  cool_turbo_off_below_set_temp: $heat_turbo_off_above_set_temp
  
esphome:
  name: ${node_name}
  comment: ${friendly_node_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: 600
    then:
      lambda: id(${node_id}_beeper).turn_on();


time:
  - platform: sntp
    id: sntp_time
    servers: 
      - ${time_server1}
      - ${time_server2}
      - ${time_server3}

wifi:
  ssid: ${ssid}
  password: ${password}
  domain: ${domain}
  ap:
    ssid: "${friendly_node_name} Fallback"
    password: ${password}
  power_save_mode: HIGH # for ESP8266 LOW/HIGH are mixed up, esphome/issues/issues/1532

web_server:
  port: ${web_server_port}
  local: true


captive_portal:

# Enable Home Assistant API
api:

# Enable Over The Air updates
ota:

logger:
  level: WARN

# Binary 
binary_sensor:
  - platform: status
    name: ${friendly_node_name} Connection Status
    id: ${node_id}_connection_status

# Sensors.
sensor:
  - platform: uptime
    name: Uptime Sensor
    id: ${node_id}_uptime_sensor
    icon: mdi:clock-start
    update_interval: 60s
  - platform: wifi_signal
    name: ${friendly_node_name} WiFi Signal
    id: ${node_id}_wifi_signal
    update_interval: 60s
  - platform: homeassistant
    name: ${friendly_node_name} Room Tempreture F
    id: ${node_id}_room_temperature_f
    entity_id: sensor.rm4_mini_temperature
    internal: false
  - platform: template
    name: ${friendly_node_name} Room Tempreture
    id: ${node_id}_room_temperature
    lambda: return ((id(${node_id}_room_temperature_f).state - 32.0) * 0.5556);
    unit_of_measurement: Â°C
    update_interval: 15s

# Text Sensors.
text_sensor:
  - platform: version
    name: ${friendly_node_name} ESPHome Version
    id: ${node_id}_esphome_version    
  - platform: wifi_info
    ip_address:
      name: ${friendly_node_name} IP Address
      id: ${node_id}_ip_address
      icon: mdi:ip-network

switch:
  - platform: template
    name: ${friendly_node_name} Beeper
    id: ${node_id}_beeper
    icon: mdi:volume-source
    optimistic: true
    turn_on_action:
      midea_ac.beeper_on:
    turn_off_action:
      midea_ac.beeper_off:
  - platform: template
    name: ${friendly_node_name} Auto Mode
    id: ${node_id}_auto_mode
    icon: mdi:car-turbocharger
    optimistic: true
    lambda: return id(auto_mode);  
    turn_on_action:
        - lambda: |-
            id(auto_mode) = true;
            ${node_id}_room_temperature).set_target_temperature(${node_id}_room_temperature).target_temperature);
    turn_off_action:
        - lambda: |-
            id(auto_mode) = false;
  - platform: template
    name: ${friendly_node_name} Boost
    id: ${node_id}_boost
    icon: mdi:car-turbocharger
    optimistic: true
    lambda: return (id(${node_id}_my_climate).preset == ClimatePreset::CLIMATE_PRESET_BOOST);
    turn_on_action:
        - lambda: |-
            auto call = id(${node_id}_my_climate).make_call();
            call.set_preset(ClimatePreset::CLIMATE_PRESET_BOOST);
            call.perform();
    turn_off_action:
        - lambda: |-
            auto call = id(${node_id}_my_climate).make_call();
            call.set_preset(ClimatePreset::CLIMATE_PRESET_NONE);
            call.perform();



button:
  - platform: restart
    id: restart_button
    name: "Restart"  

uart:
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600

climate:
  - platform: midea
    id: ${node_id}_my_climate   # Use a unique id
    name: ${friendly_node_name}          # Use a unique name
    autoconf: true
    outdoor_temperature:
      id: ${node_id}_outside_tempreture   # Use a unique id
      name: ${friendly_node_name} Outside Tempreture
    on_state:
    - logger.log: "State updated!"
    - lambda: |-
        if (id(auto_mode)) {
           ESP_LOGW("climate_temp", "applying mode: %f %f", id(${node_id}_my_climate).target_temperature, id(${node_id}_room_temperature).state);
           ClimateMode climateMode = id(${node_id}_my_climate).mode;
           ClimatePreset climatePreset = id(${node_id}_my_climate).preset.value();
           
           if(id(${node_id}_room_temperature).state < id(${node_id}_my_climate).target_temperature - $heat_on_below_set_temp) {
             climateMode = ClimateMode::CLIMATE_MODE_HEAT;
             ESP_LOGW("climate_mode", "Mode: [%s]", "heat");
           } else if(id(${node_id}_room_temperature).state  > id(${node_id}_my_climate).target_temperature + $cool_on_above_set_temp) {
             climateMode = ClimateMode::CLIMATE_MODE_COOL;
             ESP_LOGW("climate_mode", "Mode: [%s]", "cool");
           } 
           
           if((id(${node_id}_room_temperature).state < id(${node_id}_my_climate).target_temperature - $heat_turbo_on_below_set_temp) && (climateMode == ClimateMode::CLIMATE_MODE_HEAT)) {
             climatePreset = ClimatePreset::CLIMATE_PRESET_BOOST;
             ESP_LOGW("climate_preset", "Preset: [%s]", "boost");
           } else if((id(${node_id}_room_temperature).state > id(${node_id}_my_climate).target_temperature + $cool_turbo_on_above_set_temp) && (climateMode == ClimateMode::CLIMATE_MODE_COOL)) {
             climatePreset = ClimatePreset::CLIMATE_PRESET_BOOST;
             ESP_LOGW("climate_preset", "Preset: [%s]", "boost");
           } else if((id(${node_id}_room_temperature).state > id(${node_id}_my_climate).target_temperature + $heat_turbo_off_above_set_temp) && (climateMode == ClimateMode::CLIMATE_MODE_HEAT)) {
             climatePreset = ClimatePreset::CLIMATE_PRESET_NONE;
             ESP_LOGW("climate_preset", "Preset: [%s]", "boost");
           } else if((id(${node_id}_room_temperature).state < id(${node_id}_my_climate).target_temperature - $cool_turbo_off_below_set_temp) && (climateMode == ClimateMode::CLIMATE_MODE_COOL)) {
             climatePreset = ClimatePreset::CLIMATE_PRESET_NONE;
             ESP_LOGW("climate_preset", "Preset: [%s]", "boost");
           }  

           
           ESP_LOGW("climate_mode", "applying mode: %d %d", static_cast<int>(climateMode), static_cast<int>(id(${node_id}_my_climate).mode));
           if (climateMode != id(${node_id}_my_climate).mode) {
             ESP_LOGW("climate_mode", "applying mode: [%s]", "");
             auto call = id(${node_id}_my_climate).make_call();
             call.set_mode(climateMode);
             call.perform();
           }    
           
           ESP_LOGW("climate_preset", "applying preset: %d %d", static_cast<int>(climatePreset), static_cast<int>(id(${node_id}_my_climate).preset.value()));
           if (static_cast<int>(climatePreset) != static_cast<int>(id(${node_id}_my_climate).preset.value())) {
             ESP_LOGW("climate_preset", "applying preset: [%s]", "");
            auto call = id(${node_id}_my_climate).make_call();
            call.set_preset(climatePreset);
            call.perform();
           }
        }
