substitutions:
  device_type: "light"
  device_type_nice: "Light"
  input_number_max: "2"
  light_restore_mode: ALWAYS_ON
  color_interlock: 'true'
  light_settings_brightness: '{0,0.3,1}'
  light_settings_color_temp: '{371,371,218}'
  esp_board: esp8285

globals:
   - id: light_settings_brightness
     type: const std::vector<float>
     initial_value: ${light_settings_brightness}
   - id: light_settings_color_temp
     type: const std::vector<int>
     initial_value: ${light_settings_color_temp}

web_server:
  port: 80
  local: true

dashboard_import:
  package_import_url: github://athom-tech/athom-configs/athom-rgbct-light.yaml

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
  - platform: ntc
    sensor: temp_resistance_reading
    name: "${friendly_name} ESP Temperature"
    unit_of_measurement: "Â°c"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K

button:
    platform: template
    id: test
    name: "${friendly_name} Test"
    on_press:
      then:
      - http_request.get:
          url: ${scene_master_host}
          on_response:
            then:
             - lambda: |-
                  json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                      id(scene).publish_state(root["state"]);
                  });


output:
  - platform: esp8266_pwm
    id: red_output
    pin: GPIO4
  - platform: esp8266_pwm
    id: green_output
    pin: GPIO12
  - platform: esp8266_pwm
    id: blue_output
    pin: GPIO14
  - platform: esp8266_pwm
    id: white_output
    pin: GPIO5
  - platform: esp8266_pwm
    id: ct_output
    inverted: true
    pin: GPIO13

light:
  - platform: rgbct
    name: "${nice_name}"
    id: "${device_name}_rgbct_light"
    restore_mode: ${light_restore_mode}
    red: red_output
    green: green_output
    blue: blue_output
    white_brightness: white_output
    color_temperature: ct_output
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2000 K
    color_interlock: ${color_interlock}
    default_transition_length: 0.33s

number:
  - platform: template
    id: "scene"
    name: "${friendly_name} Scene"
    optimistic: true
    min_value: 0
    max_value: ${input_number_max}
    restore_value: false
    step: 1
    on_value:
      then:
        - if:
            condition:
              - lambda: return (0.0 == x);
            then:
              - light.turn_off:
                  id: "${device_name}_rgbct_light"
                  transition_length: 1s
            else:
              - light.turn_on:
                  id: "${device_name}_rgbct_light"
                  color_mode: "COLOR_TEMPERATURE"
                  color_temperature: !lambda return id(light_settings_color_temp)[x];
                  brightness: !lambda return  id(light_settings_brightness)[x];
  - platform: template
    id: "color_brightness"
    name: "${friendly_name} Color Brightness"
    optimistic: true
    min_value: 0
    max_value: 100
    restore_value: true
    step: 1
    on_value:
      then:
        - light.turn_on:
            id: "${device_name}_rgbct_light"
            color_mode: "RGB"
            color_brightness: !lambda 'return x/100.0;'
  - platform: template
    id: "white_brightness"
    name: "${friendly_name} White Brightness"
    optimistic: true
    min_value: 0
    max_value: 100
    restore_value: true
    step: 1
    on_value:
      then:
        - light.turn_on:
            id: "${device_name}_rgbct_light"
            color_mode: "WHITE"
            brightness: !lambda 'return x/100.0;'
  - platform: template
    id: "color_tempreture"
    name: "${friendly_name} Color Tempreture"
    optimistic: true
    min_value: 154
    max_value: 500
    restore_value: true
    step: 1
    on_value:
      then:
        - light.turn_on:
            id: "${device_name}_rgbct_light"
            color_mode: "COLOR_TEMPERATURE"
            color_temperature: !lambda 'return x;'
  - platform: template
    id: "red"
    name: "${friendly_name} Red"
    optimistic: true
    min_value: 0
    max_value: 100
    restore_value: true
    step: 1
    on_value:
      then:
        - light.turn_on:
            id: "${device_name}_rgbct_light"
            color_mode: "RGB"
            red: !lambda 'return x/100.0;'
  - platform: template
    id: "green"
    name: "${friendly_name} Green"
    optimistic: true
    min_value: 0
    max_value: 100
    restore_value: true
    step: 1
    on_value:
      then:
        - light.turn_on:
            id: "${device_name}_rgbct_light"
            color_mode: "RGB"
            green: !lambda 'return x/100.0;'
  - platform: template
    id: "blue"
    name: "${friendly_name} Blue"
    optimistic: true
    min_value: 0
    max_value: 100
    restore_value: true
    step: 1
    on_value:
      then:
        - light.turn_on:
            id: "${device_name}_rgbct_light"
            color_mode: "RGB"
            blue: !lambda 'return x/100.0;'


packages:
  base: 
    url: https://github.com/snetsplit/esphome-automation
    file: yaml/base/esp8266.yaml
    refresh: 1s