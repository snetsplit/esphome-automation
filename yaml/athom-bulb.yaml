substitutions:
  name: "athom-bulb"
  id: "athom_bulb"
  friendly_name: "Athom Bulb"
  light_automation_1_input_number_min: "0"
  light_automation_1_input_number_max: "3"
  project_name: "athom.rgbct-light"
  project_version: "1.0"
  light_restore_mode: ALWAYS_ON
  color_interlock: 'true'
  address: "${name}-light.lan"
  web_server_port: "80"
  ssid: "IP freely"
  password: "ewwwwwwwww"
  switch_ssid: "Switch Shelly Fallback"


esphome:
  name: ${name}
  name_add_mac_suffix: false
  project:
    name: "${project_name}"
    version: "${project_version}"
  on_boot:
    - priority: 600
      then:
      - number.set:
          id: "scene"
          value: 1
    - priority: 200
      then:
      - http_request.get:
          url: http://bathroom-switch.lan/number/scene
          on_response:
            then:
             - lambda: |-
                  json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                      id(scene).publish_state(root["state"]);
                  });


http_request:
  useragent: esphome/device
  timeout: 2s
  id: "http_request_data"
  esp8266_disable_ssl_support: true

esp8266:
  board: esp8285
  restore_from_flash: false

api:

ota:

logger:

web_server:
  port: 80
  local: true


wifi:
  ap:
    ssid: "${friendly_name} Fallback"
    password: ${password}
  networks:
   - ssid: ${ssid}
     password: ${password}
   - ssid: "${switch_ssid}"
     password: !secret wifi_password
     manual_ip: 
      static_ip: 192.168.4.4
      subnet: 255.255.255.0
      gateway: 192.168.4.1
      dns1: 192.168.4.1
  use_address: ${address}
  power_save_mode: HIGH # for ESP8266 LOW/HIGH are mixed up, esphome/issues/issues/1532
  
captive_portal:

dashboard_import:
  package_import_url: github://athom-tech/athom-configs/athom-rgbct-light.yaml

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
  - platform: ntc
    sensor: temp_resistance_reading
    name: "${friendly_name} Temperature"
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    device_class: temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0
    
button:
  - platform: restart
    id: restart_button
    name: "${friendly_name} Restart"

output:
  - platform: esp8266_pwm
    id: red_output
    pin: GPIO4
  - platform: esp8266_pwm
    id: green_output
    pin: GPIO12
  - platform: esp8266_pwm
    id: blue_output
    pin: GPIO14
  - platform: esp8266_pwm
    id: white_output
    pin: GPIO5
  - platform: esp8266_pwm
    id: ct_output
    inverted: true
    pin: GPIO13

light:
  - platform: rgbct
    name: "${friendly_name}"
    id: "${id}_rgbct_light"
    restore_mode: ${light_restore_mode}
    red: red_output
    green: green_output
    blue: blue_output
    white_brightness: white_output
    color_temperature: ct_output
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2000 K
    color_interlock: ${color_interlock}
    default_transition_length: 0.33s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      disabled_by_default: true
  


number:
  - platform: template
    id: "scene"
    name: "scene"
    optimistic: true
    min_value: ${light_automation_1_input_number_min}
    max_value: ${light_automation_1_input_number_max}
    restore_value: false
    step: 1
    on_value:
      then:
        - if:
            condition:
              - lambda: return (0.0 == x);
            then:
              - light.turn_off:
                  id: "${id}_rgbct_light"
                  transition_length: 1s
        - if:
            condition:
              - lambda: return (1.0 == x);
            then:
              - light.turn_on:
                  id: "${id}_rgbct_light"
                  color_mode: "COLOR_TEMPERATURE"
                  brightness: 32%
                  color_temperature: 2600 K
        - if:
            condition:
              - lambda: return (2.0 == x);
            then:
              - light.turn_on:
                  id: "${id}_rgbct_light"
                  color_mode: "COLOR_TEMPERATURE"
                  brightness: 100%
                  color_temperature: 3000 K
        - if:
            condition:
              - lambda: return (3.0 == x);
            then:
              - light.turn_on:
                  id: "${id}_rgbct_light"
                  color_mode: "COLOR_TEMPERATURE"
                  brightness: 100%
                  color_temperature: 6500 K
